buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.7'
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
    classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.3.0'
    classpath 'org.standardout:gradle-versioneye-plugin:latest.release'
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:latest.release'
  }
  configurations {
    classpath {
      resolutionStrategy {
        componentSelection {
          all { ComponentSelection selection ->
            def candidate = selection.candidate
            if (candidate.version ==~ /(?i)^.*(?:alpha|beta|gamma|rc|snapshot).*$/) {
              selection.reject("${candidate.group}:${candidate.name}:${candidate.version} is not a production release.")
            }
          }
        }
      }
    }
  }
}

plugins {

  // Supported Plugins
  // ---------------------------------------------------------------------------

  id 'checkstyle'
  id 'findbugs'
  id 'jacoco'
  id 'java'
  id 'jdepend'
  id 'maven-publish'
  id 'pmd'
}

apply plugin: 'com.google.protobuf'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'org.standardout.versioneye'
apply plugin: 'com.github.kt3k.coveralls'

repositories {
  mavenCentral()
  jcenter()
}

group = 'com.github.universal-automata'
archivesBaseName = name
version = '3.0.0' // http://semver.org/

description = 'A library for spelling-correction based on Levenshtein Automata.'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
  srcJava = file("$projectDir/src/main/java")
  srcProto = file("$buildDir/generated/source/proto/main/java")
  srcAll = file("$buildDir/generated/source/all")
  srcDelomboked = file("$buildDir/src-delomboked/main/java")

  githubOrg = 'universal-automata'
  githubRepo = "liblevenshtein-java"
  gitUri = "git@github.com:${githubOrg}/${githubRepo}.git"
  vcsUrl = "https://github.com/${githubOrg}/${githubRepo}.git"
  //gitBranch = "master"
  gitBranch = version
  projectUrl = "https://github.com/${githubOrg}/${githubRepo}/"
  issuesUrl = "${projectUrl}/issues"
  projectAuthor = 'Dylon Edwards'
  authorUsername = 'dylon'
  authorEmail = "dylon.devo+${githubRepo}@gmail.com"
  demoUrl = "http://${githubOrg}.github.io/${rootProject.name}/"

  wikidocDir = file("${projectDir}/gh-pages/docs/wiki/${version}")
  latestWikidocDir = file("${projectDir}/gh-pages/docs/wiki/latest")

  latestGroupId = rootProject.group
  latestArtifactId = rootProject.name
  latestVersion = '3.0.0'

  isReleaseVersion = version ==~ /^\d+\.\d+\.\d+$/
  isDevelopmentVersion = !isReleaseVersion
}

def resolutionStrategy = {
  resolutionStrategy {
    componentSelection {
      all { ComponentSelection selection ->
        def candidate = selection.candidate
        if (candidate.group == 'com.google.protobuf') {
          if (candidate.version ==~ /(?i)^.*(?:alpha|snapshot).*$/) {
            selection.reject("${candidate.group}:${candidate.name}:${candidate.version} is not a stable-enough release.")
          }
        }
        else if (candidate.version ==~ /(?i)^.*(?:alpha|beta|gamma|rc|snapshot).*$/) {
          selection.reject("${candidate.group}:${candidate.name}:${candidate.version} is not a production release.")
        }
      }
    }
  }
}

configurations {
  compile resolutionStrategy
  taskCompile resolutionStrategy
  taskRuntime resolutionStrategy
  testCompile resolutionStrategy
  testRuntime resolutionStrategy
  jacocoAgent resolutionStrategy
  jacocoAnt resolutionStrategy
  checkstyle resolutionStrategy
  jdepend resolutionStrategy
  pmd resolutionStrategy
  shell resolutionStrategy
  // Regression tests
  regr resolutionStrategy
  regrCompile.extendsFrom testCompile
  regrRuntime.extendsFrom testRuntime
  // Integration tests
  integ resolutionStrategy
  integCompile.extendsFrom testCompile
  integRuntime.extendsFrom testRuntime
}

sourceSets {
  regr {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file("$projectDir/src/regr/java")
    }
    resources.srcDir file("$projectDir/src/regr/resources")
  }
  integ {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file("$projectDir/src/integ/java")
    }
    resources.srcDir file("$projectDir/src/integ/resources")
  }
  task
}

findbugs {
  excludeFilter = file("${rootProject.projectDir}/config/findbugs/exclude-filter.xml")
}

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:3.+"
  }
}

dependencies {
  compile 'com.google.code.findbugs:annotations:3.+'
  compile 'com.google.guava:guava:30.0-jre'
  compile 'com.google.protobuf:protobuf-java-util:3.+'
  compile 'com.google.protobuf:protobuf-java:3.+'
  compile 'it.unimi.dsi:fastutil:7.+'
  compile 'org.apache.commons:commons-lang3:3.+'
  compile 'org.projectlombok:lombok:1.+'
  compile 'org.slf4j:slf4j-api:1.7.21'

  taskCompile 'com.google.code.findbugs:annotations:latest.release'
  taskCompile 'com.google.guava:guava:30.0-jre'
  taskCompile 'commons-cli:commons-cli:1.3.1'
  taskCompile 'commons-io:commons-io:latest.release'
  taskCompile 'org.antlr:ST4:latest.release'
  taskCompile 'org.projectlombok:lombok:latest.release'
  taskCompile 'org.slf4j:slf4j-api:1.7.21'

  taskRuntime 'ch.qos.logback:logback-classic:1.2.0'
  taskRuntime 'org.codehaus.groovy:groovy-all:2.4.6'
  taskRuntime 'org.slf4j:jcl-over-slf4j:1.7.21'
  taskRuntime 'org.slf4j:jul-to-slf4j:1.7.21'
  taskRuntime 'org.slf4j:log4j-over-slf4j:1.7.21'
  taskRuntime 'org.slf4j:osgi-over-slf4j:latest.release'

  testCompile 'com.google.jimfs:jimfs:latest.release'
  testCompile 'org.assertj:assertj-core:latest.release'
  testCompile 'org.mockito:mockito-all:1.+'
  testCompile 'org.testng:testng:latest.release'

  testRuntime 'ch.qos.logback:logback-classic:1.2.0'
  testRuntime 'org.codehaus.groovy:groovy-all:2.4.6'
  testRuntime 'org.slf4j:jcl-over-slf4j:1.7.21'
  testRuntime 'org.slf4j:jul-to-slf4j:1.7.21'
  testRuntime 'org.slf4j:log4j-over-slf4j:1.7.21'
  testRuntime 'org.slf4j:osgi-over-slf4j:1.7.21'

  integCompile 'jdepend:jdepend:latest.release'

  // JaCoCo (Plugin)
  jacocoAgent 'org.jacoco:org.jacoco.agent:latest.release'
  jacocoAnt 'org.jacoco:org.jacoco.ant:latest.release'

  // Checkstyle (Plugin)
  checkstyle 'com.puppycrawl.tools:checkstyle:6.19'

  // JDepend (Plugin)
  jdepend 'org.apache.ant:ant-jdepend:latest.release'

  // PMD (Plugin)
  pmd 'net.sourceforge.pmd:pmd-java:latest.release'

  shell 'commons-cli:commons-cli:1.3.1'
  shell('jline:jline:latest.release') {
    exclude(group: 'junit', module: 'junit')
  }
  shell 'org.codehaus.groovy:groovy-groovysh:latest.release'
}

jacocoTestReport {
  reports {
    xml.enabled = true // coveralls plugin depends on xml format report
    html.enabled = true
  }
  afterEvaluate {
    classDirectories = files(classDirectories.files.collect {
      fileTree(
        dir: it,
        exclude: [
          '**/LibLevenshteinProtos*'
        ]
      )
    })
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:all"
}

test {
  useTestNG() {
    // Run as many tests in-parallel as there are CPU cores
    parallel 'methods'
    threadCount Runtime.runtime.availableProcessors()
  }

  testLogging {
    //events 'passed', 'skipped', 'failed'
    events 'skipped', 'failed'
    exceptionFormat 'full'
    showStandardStreams true
    showExceptions true
    showStackTraces true
  }
}

task regr(type: Test) {
  useTestNG() {
    // Run as many tests in-parallel as there are CPU cores
    parallel 'methods'
    threadCount Runtime.getRuntime().availableProcessors()
  }

  description = 'Runs regression tests for the project'
  testClassesDir = sourceSets.regr.output.classesDir
  classpath = sourceSets.regr.runtimeClasspath
  testLogging {
    events 'passed', 'skipped', 'failed'
    exceptionFormat 'full'
    showStandardStreams true
    showExceptions true
    showStackTraces true
  }
}

task integ(type: Test) {
  useTestNG() {
    // Run as many tests in-parallel as there are CPU cores
    parallel 'methods'
    threadCount Runtime.getRuntime().availableProcessors()
  }

  description = 'Runs integration tests for the project'
  testClassesDir = sourceSets.integ.output.classesDir
  classpath = sourceSets.integ.runtimeClasspath
  outputs.upToDateWhen { false } // always run integration tests
  testLogging {
    events 'passed', 'skipped', 'failed'
    exceptionFormat 'full'
    showStandardStreams true
    showExceptions true
    showStackTraces true
  }
}

def exec(classpath, mainClass, args=[]) {
  def command = [
    'java',
    '-cp', classpath.asPath,
    mainClass
  ] + args

  def proc = new ProcessBuilder(command).inheritIO().start()
  proc.waitFor()

  if (0 != proc.exitValue()) {
    throw new RuntimeException("shell exited with status: ${proc.exitValue()}")
  }
}

def execTask(mainClass, args=[]) {
  def classpath = configurations.taskRuntime
  classpath += files(sourceSets.task.output.classesDir)
  classpath += files(sourceSets.task.output.resourcesDir)
  exec(classpath, mainClass, args + [
    '--group-id', rootProject.group,
    '--artifact-id', rootProject.name,
    '--version', rootProject.version,
    '--latest-group-id', rootProject.ext.latestGroupId,
    '--latest-artifact-id', rootProject.ext.latestArtifactId,
    '--latest-version', rootProject.ext.latestVersion,
    '--gradle-version', gradle.gradleVersion,
    '--java-source-version', sourceCompatibility.toString(),
    '--java-target-version', targetCompatibility.toString(),
    '--github-org', githubOrg.toString(),
    '--github-repo', githubRepo.toString(),
    '--git-uri', gitUri.toString(),
    '--git-branch', gitBranch.toString(),
    '--project-url', projectUrl.toString(),
    '--project-author', projectAuthor.toString(),
    '--author-username', authorUsername.toString(),
    '--author-email', authorEmail.toString(),
    '--demo-url', demoUrl.toString()
  ])
}

task printGitBranch {
  description = "Prints rootProject.ext.gitBranch [${rootProject.ext.gitBranch}]"
  doLast {
    println("${rootProject.ext.gitBranch}")
  }
}

task printVersion {
  description = "Prints rootProject.version [${rootProject.version}]"
  doLast {
    println("${rootProject.version}")
  }
}

task printLatestVersion {
  description = "Prints rootProject.ext.latestVersion [${rootProject.ext.latestVersion}]"
  doLast {
    println("${rootProject.ext.latestVersion}")
  }
}

task(shell, dependsOn: classes) {
  description =
    'Groovy repl with this project and all its dependencies on the $CLASSPATH'

  doLast {
    def classpath = configurations.shell
    classpath += files(sourceSets.task.output.classesDir)
    classpath += files(sourceSets.task.output.resourcesDir)
    sourceSets.each() {classpath += it.runtimeClasspath}
    exec(classpath, 'org.codehaus.groovy.tools.shell.Main', ['--color'])
  }
}

// create syntastic classpath files
task syntastic(dependsOn: taskClasses) {
  description = 'Dumps the classpaths a file that can be read by Syntastic.vim'
  doLast {
    def classpath = configurations.taskRuntime
    classpath += files(sourceSets.task.output.classesDir)
    classpath += files(sourceSets.task.output.resourcesDir)
    sourceSets.each() {classpath += it.runtimeClasspath}

    def configPath = "${projectDir}/.vimrc.local".toString()

    execTask('com.github.liblevenshtein.task.GenerateSyntasticConfig', [
      "--classpath", classpath.asPath,
      "--config-path", configPath
    ])
  }
}

task wikidoc(dependsOn: taskClasses) {
  description = 'Generates GitHub, wiki documentation'
  doFirst {
    if (wikidocDir.exists() && !wikidocDir.deleteDir()) {
      throw new IOException("Failed to delete wikidoc dir [${wikidocDir}]")
    }
    wikidocDir.mkdirs()
  }
  doLast {
    execTask('com.github.liblevenshtein.task.GenerateWikidoc', [
      "--wiki-path", wikidocDir.path
    ])
    copy {
      from wikidocDir
      into latestWikidocDir
    }
  }
}

task readme(dependsOn: taskClasses) {
  description = 'Keeps the README.md up-to-date'
  doLast {
    execTask('com.github.liblevenshtein.task.GenerateReadme', [
      "--readme-path", "$projectDir/README.md".toString()
    ])
  }
}

tasks.withType(FindBugs) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

artifactory {
  contextUrl = 'https://oss.jfrog.org/artifactory'
  publish {
    repository {
      repoKey = 'oss-release-local'
      username = System.env['BINTRAY_USER']
      password = System.env['BINTRAY_API_KEY']
      maven = true
    }
    defaults {
      publications('mavenJava')
    }
  }
  resolve {
    repository {
      repoKey = 'libs-release'
      username = System.env['BINTRAY_USER']
      password = System.env['BINTRAY_API_KEY']
      maven = true
    }
  }
}

bintray {
  user = System.env['BINTRAY_USER']
  key = System.env['BINTRAY_API_KEY']
  publications = ['mavenJava']
  dryRun = rootProject.ext.isDevelopmentVersion
  publish = true
  pkg {
    userOrg = 'universal-automata'
    repo = 'liblevenshtein'
    name = 'liblevenshtein-java'
    desc = rootProject.description
    websiteUrl = rootProject.ext.projectUrl
    githubRepo = "${rootProject.ext.githubOrg}/${rootProject.ext.githubRepo}"
    githubReleaseNotesFile = 'CHANGELOG.md'
    issueTrackerUrl = rootProject.ext.issuesUrl
    licenses = ['MIT']
    vcsUrl = rootProject.ext.vcsUrl
    labels = [
      'approximate string matching',
      'automata',
      'bioinformatics',
      'computational biology',
      'computer science',
      'data science',
      'dawg',
      'dictionary',
      'distance measure',
      'distance metric',
      'edit distance',
      'finite state automata',
      'finite state automaton',
      'finite state transducer',
      'fuzzy search',
      'fuzzy searching',
      'genomics',
      'information retrieval',
      'levenshtein automata',
      'levenshtein distance',
      'maching learning',
      'mafsa',
      'search engine',
      'spelling correction',
      'transducer',
      'trie',
      'universal automata'
    ]
    publicDownloadNumbers = true
    version {
      desc = rootProject.description
      released = new Date()
      vcsTag = rootProject.version
      mavenCentralSync {
        sync = true
        user = System.env['SONATYPE_USERNAME']
        password = System.env['SONATYPE_PASSWORD']
        close = '1'
      }
    }
  }
}

def pomConfig = {
  licenses {
    license {
      name 'MIT License'
      url "https://raw.githubusercontent.com/${githubOrg}/${githubRepo}/master/LICENSE"
      distribution 'repo'
    }
  }
  developers {
    developer {
      id 'dylon'
      name 'Dylon Edwards'
      email "dylon.devo+${githubRepo}@gmail.com"
      url 'https://github.com/dylon'
    }
  }
  issueManagement {
    system 'GitHub Issues'
    url "${projectUrl}/issues"
  }
  scm {
    url projectUrl
    connection "scm:git:https://github.com/${githubOrg}/${githubRepo}.git"
    developerConnection "scm:git:git@github.com:${githubOrg}/${githubRepo}.git"
  }
}

task javadocJar(type: Jar, dependsOn: [javadoc, classes]) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from file(srcDelomboked)
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar

      pom.withXml {
        def root = asNode()
        root.appendNode('name', rootProject.name)
        root.appendNode('description', rootProject.description)
        root.appendNode('url', rootProject.ext.projectUrl)
        root.appendNode('inceptionYear', '2012')
        root.appendNode('packaging', 'jar')

        // Generate map of resolved versions
        Map resolvedVersionMap = [:]
        Set<ResolvedArtifact> resolvedArtifacts =
          configurations.compile.getResolvedConfiguration().getResolvedArtifacts()
        resolvedArtifacts.addAll(
          configurations.testCompile.getResolvedConfiguration().getResolvedArtifacts())
        resolvedArtifacts.each {
          ModuleVersionIdentifier mvi = it.getModuleVersion().getId();
          resolvedVersionMap.put("${mvi.getGroup()}:${mvi.getName()}", mvi.getVersion())
        }

        // Update dependencies with resolved versions
        root.dependencies.first().each {
          def groupId = it.get("groupId").first().value().first()
          def artifactId = it.get("artifactId").first().value().first()
          it.get("version").first().value = resolvedVersionMap.get("${groupId}:${artifactId}")
        }

        root.children().last() + pomConfig
      }
    }
  }
}

task delombok(dependsOn: 'generateProto') {
  dependsOn configurations.compile.getTaskDependencyFromProjectDependency(true, "compileJava")

  inputs.files srcJava, srcProto
  outputs.dir srcDelomboked

  doFirst {
    if (!srcAll.mkdirs()) {
      throw new IllegalStateException("Cannot copy sources into [$srcAll]")
    }
    if (!srcDelomboked.mkdirs()) {
      throw new IllegalStateException("Cannot delombok sources into [${srcDelomboked}]")
    }
  }

  doLast {
    ant.taskdef(
      name: 'delombok',
      classname: 'lombok.delombok.ant.Tasks$Delombok',
      classpath: configurations.compile.asPath)
    copy {
      from srcJava
      into srcAll
    }
    copy {
      from srcProto
      into srcAll
    }
    ant.delombok(
      from: srcAll,
      to: srcDelomboked,
      classpath: configurations.compile.asPath)
  }
}

tasks.javadoc {
  dependsOn delombok
  doFirst {
    source = new FileNameFinder().getFileNames("${srcDelomboked}", '**/*.java')
    destinationDir = file("${projectDir}/gh-pages/docs/javadoc/${version}")
    if (destinationDir.exists() && !destinationDir.deleteDir()) {
      throw new IOException("Failed to delete javadoc dir [${destinationDir}]")
    }
    destinationDir.mkdirs()
  }
  options.optionFiles << file('javadoc.options')
}

tasks.withType(Checkstyle) {
  def jsSrc = file("${projectDir}/src/checkstyle/js")
  def jsDest = file("${buildDir}/reports/checkstyle/js")
  def cssSrc = file("${projectDir}/src/checkstyle/css")
  def cssDest = file("${buildDir}/reports/checkstyle/css")
  doFirst {
    if (!jsDest.exists() && !jsDest.mkdirs()) {
      throw new IOException("Cannot create JavaScript directory [${jsDest}]")
    }
    if (!cssDest.exists() && !cssDest.mkdirs()) {
      throw new IOException("Cannot create CSS directory [${cssDest}]")
    }
    copy {
      from jsSrc
      into jsDest
    }
    copy {
      from cssSrc
      into cssDest
    }
  }
  reports {
    xml.enabled true
    html {
      enabled true
      stylesheet resources.text.fromFile('src/checkstyle/xslt/checkstyle.xsl')
    }
  }
}

check.dependsOn regr
regr.mustRunAfter test
regr.dependsOn classes
regr.dependsOn regrClasses

check.dependsOn integ
integ.mustRunAfter test
integ.dependsOn classes
integ.dependsOn testClasses
integ.dependsOn regrClasses
integ.dependsOn integClasses
integ.dependsOn taskClasses

// vim: set ft=groovy ts=2 sw=2 et sta:
